// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Programmer.Data;

namespace Programmer.Data.Migrations
{
    [DbContext(typeof(ProgrammerDbContext))]
    [Migration("20200228104828_InitialMigrate")]
    partial class InitialMigrate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Programmer.Models.AdditionalActivityCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BaseTimeNeeded")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentationId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<double>("HardSkillReward")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequiredEnergy")
                        .HasColumnType("int");

                    b.Property<double>("SoftSkillReward")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DocumentationId");

                    b.HasIndex("EventId");

                    b.ToTable("AdditionalActivityCategories");
                });

            modelBuilder.Entity("Programmer.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan>("BaseTimeNeeded")
                        .HasColumnType("time");

                    b.Property<string>("HardSkillName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("HardSkillReward")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RequiredEnergy")
                        .HasColumnType("int");

                    b.Property<string>("SoftSkillName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SoftSkillReward")
                        .HasColumnType("float");

                    b.Property<int>("XpReward")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Programmer.Models.Documentation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProgrammerUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("XpReward")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgrammerUserId");

                    b.ToTable("Documentations");
                });

            modelBuilder.Entity("Programmer.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProgrammerUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("XpReward")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgrammerUserId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Programmer.Models.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan>("BaseTimeNeeded")
                        .HasColumnType("time");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<double>("RequiredCodingSkill")
                        .HasColumnType("float");

                    b.Property<int>("RequiredEnergy")
                        .HasColumnType("int");

                    b.Property<double>("RequiredHardSkill")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("Programmer.Models.JobTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("MoneyReward")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProgrammerUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RequiredEnergy")
                        .HasColumnType("int");

                    b.Property<int>("RequiredSkillId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("TimeNeeded")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ProgrammerUserId");

                    b.HasIndex("RequiredSkillId");

                    b.ToTable("JobTasks");
                });

            modelBuilder.Entity("Programmer.Models.Lecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Lectures");
                });

            modelBuilder.Entity("Programmer.Models.ProgrammerRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ProgrammerUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.HasIndex("ProgrammerUserId");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Programmer.Models.ProgrammerUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("AbstractThinking")
                        .HasColumnType("float");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<double?>("Algorithms")
                        .HasColumnType("float");

                    b.Property<double?>("AspNetCore")
                        .HasColumnType("float");

                    b.Property<int>("Bitcoins")
                        .HasColumnType("int");

                    b.Property<double>("CSharp")
                        .HasColumnType("float");

                    b.Property<double>("Coding")
                        .HasColumnType("float");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Creativity")
                        .HasColumnType("float");

                    b.Property<double?>("Css")
                        .HasColumnType("float");

                    b.Property<double>("Curiosity")
                        .HasColumnType("float");

                    b.Property<double?>("DataStructures")
                        .HasColumnType("float");

                    b.Property<double?>("DatabasesAndSQL")
                        .HasColumnType("float");

                    b.Property<double?>("EfCore")
                        .HasColumnType("float");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Energy")
                        .HasColumnType("int");

                    b.Property<double?>("Html")
                        .HasColumnType("float");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("Money")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double?>("NodeJs")
                        .HasColumnType("float");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<double>("ProblemSolving")
                        .HasColumnType("float");

                    b.Property<double?>("React")
                        .HasColumnType("float");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TaskTimeRemaining")
                        .HasColumnType("datetime2");

                    b.Property<double>("Teamwork")
                        .HasColumnType("float");

                    b.Property<double?>("Testing")
                        .HasColumnType("float");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<double?>("VanillaJavaScript")
                        .HasColumnType("float");

                    b.Property<long>("Xp")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Programmer.Models.RequiredSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("RequiredHardSkillOne")
                        .HasColumnType("float");

                    b.Property<double>("RequiredHardSkillTwo")
                        .HasColumnType("float");

                    b.Property<double>("ReuqiredSoftSkill")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("RequiredSkills");
                });

            modelBuilder.Entity("Programmer.Models.UserCourse", b =>
                {
                    b.Property<string>("ProgrammerUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnrolled")
                        .HasColumnType("bit");

                    b.HasKey("ProgrammerUserId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("UserCourses");
                });

            modelBuilder.Entity("Programmer.Models.UserLecture", b =>
                {
                    b.Property<string>("ProgrammerUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LectureId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.HasKey("ProgrammerUserId", "LectureId");

                    b.HasIndex("LectureId");

                    b.ToTable("UserLectures");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Programmer.Models.ProgrammerRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Programmer.Models.ProgrammerUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Programmer.Models.ProgrammerUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Programmer.Models.ProgrammerRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Programmer.Models.ProgrammerUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Programmer.Models.ProgrammerUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Programmer.Models.AdditionalActivityCategory", b =>
                {
                    b.HasOne("Programmer.Models.Documentation", "Documentation")
                        .WithMany("Categories")
                        .HasForeignKey("DocumentationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Programmer.Models.Event", "Event")
                        .WithMany("Categories")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Programmer.Models.Documentation", b =>
                {
                    b.HasOne("Programmer.Models.ProgrammerUser", "Player")
                        .WithMany("Documentations")
                        .HasForeignKey("ProgrammerUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Programmer.Models.Event", b =>
                {
                    b.HasOne("Programmer.Models.ProgrammerUser", "Player")
                        .WithMany("Events")
                        .HasForeignKey("ProgrammerUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Programmer.Models.Exam", b =>
                {
                    b.HasOne("Programmer.Models.Course", "Course")
                        .WithOne("Exam")
                        .HasForeignKey("Programmer.Models.Exam", "CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Programmer.Models.JobTask", b =>
                {
                    b.HasOne("Programmer.Models.ProgrammerUser", "Player")
                        .WithMany("JobTasks")
                        .HasForeignKey("ProgrammerUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Programmer.Models.RequiredSkill", "RequiredSkills")
                        .WithMany("JobTasks")
                        .HasForeignKey("RequiredSkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Programmer.Models.Lecture", b =>
                {
                    b.HasOne("Programmer.Models.Course", "Course")
                        .WithMany("Lectures")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Programmer.Models.ProgrammerRole", b =>
                {
                    b.HasOne("Programmer.Models.ProgrammerUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("ProgrammerUserId");
                });

            modelBuilder.Entity("Programmer.Models.UserCourse", b =>
                {
                    b.HasOne("Programmer.Models.Course", "Course")
                        .WithMany("Users")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Programmer.Models.ProgrammerUser", "User")
                        .WithMany("Courses")
                        .HasForeignKey("ProgrammerUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Programmer.Models.UserLecture", b =>
                {
                    b.HasOne("Programmer.Models.Lecture", "Lecture")
                        .WithMany("UserLectures")
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Programmer.Models.ProgrammerUser", "User")
                        .WithMany("UserLectures")
                        .HasForeignKey("ProgrammerUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
