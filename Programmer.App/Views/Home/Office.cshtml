
@{
    ViewData["Title"] = "Home";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@model Programmer.App.Models.Office.OfficeViewModel

<section class="page-section row">
    <ul class="d-flex list-unstyled justify-content-md-around ml-auto bg-primary text-white py-3 col-md-12">
        <li class="nav-item mx-0 mx-lg-1">
            <span data-toggle="tooltip"><i class="fas fa-user"></i>@this.User.Identity.Name</span>
        </li>
        <li class="nav-item mx-0 mx-lg-1">
            <span><i class="fas fa-level-up-alt"></i>Level - @Model.Level</span>
        </li>
        <li class="nav-item mx-0 mx-lg-1">
            <span><i class="fas fa-at"></i>Xp - @Model.Xp/@Model.XpForNextLevel</span>
        </li>
        <li class="nav-item mx-0 mx-lg-1">
            <span><i class="far fa-money-bill-alt"></i>Money - @Model.Money$</span>
        </li>
        <li class="nav-item mx-0 mx-lg-1">
            <span><i class="fab fa-bitcoin"></i>Bitcoins - @Model.Bitcoins</span>
        </li>
        <li class="nav-item mx-0 mx-lg-1">
            <span id="energy"><i class="fas fa-bolt"></i>Energy - @Model.Energy - <span id="timer"></span></span>
        </li>
    </ul>

    <div class="col-md-4 mx-5">
        <h2>Stats:</h2>
        @foreach (var kvp in Model.UserStats.Where(s => s.Value != null).OrderBy(x => x.Key))
        {
            <h5>@kvp.Key - @kvp.Value</h5>
        }
    </div>

    <div class="office col-md-7">
        <img src="~/img/OfficeTemplate-Cropped.jpg" class="office-image" alt="Office" />
        <a href="https://google.com" class="book-shelf item"><i class="fas fa-plus-circle"></i></a>
        <a href="#" class="monitor item"><i class="fas fa-plus-circle"></i></a>
        <a href="#" class="chair item"><i class="fas fa-plus-circle"></i></a>
        <a href="#" class="computer item"><i class="fas fa-plus-circle"></i></a>
        <a href="#" class="keyboard item"><i class="fas fa-plus-circle"></i></a>
        <a href="#" class="mouse item"><i class="fas fa-plus-circle"></i></a>
    </div>

    <div class="col-md-12">
        @if (Model.TimeRemaining != null)
        {
            <p id="demo"></p>
        }
    </div>
</section>

<script>
    // Set the date we're counting down to
    var countDownDate = Date.now() + @Model.TimeRemaining?.TotalMilliseconds;

    // Update the count down every 1 second
    var x = setInterval(function () {

        // Get today's date and time
        var now = new Date().getTime();

        // Find the distance between now and the count down date
        var distance = countDownDate - now;

        // Time calculations for days, hours, minutes and seconds
        var days = Math.floor(distance / (1000 * 60 * 60 * 24));
        var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        var seconds = Math.floor((distance % (1000 * 60)) / 1000);

        // Display the result in the element with id="demo"
        document.getElementById("demo").innerHTML = days + "d " + hours + "h "
            + minutes + "m " + seconds + "s ";

        // If the count down is finished, write some text
        if (distance < 0) {
            clearInterval(x);
            document.getElementById("demo").innerHTML = "DONE";

            new XMLHttpRequest().open("GET", "/Lectures/UpdateUser", true);
        }
    }, 1000);
</script>

<script>
    // Set the date we're counting down to
    var countDownDate = Date.now() + @DateTime.UtcNow.AddMilliseconds(300000);

    // Update the count down every 1 second
    var x = setInterval(function () {

        // Get today's date and time
        var now = new Date().getTime();

        // Find the distance between now and the count down date
        var distance = countDownDate - now;

        // Time calculations for days, hours, minutes and seconds
        var days = Math.floor(distance / (1000 * 60 * 60 * 24));
        var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        var seconds = Math.floor((distance % (1000 * 60)) / 1000);

        // Display the result in the element with id="demo"
        document.getElementById("timer").innerHTML = minutes + "m " + seconds + "s ";

        // If the count down is finished, write some text
        if (distance < 0) {
            let currentEnergy = document.getElementById("energy").innerHTML;
            document.getElementById("energy").innerHTML = `${currentEnergy++}`;
        }

        if (document.getElementById("energy").innerHTML === "30") {
            clearInterval(0);
        }
    }, 1000);
</script>
